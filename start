#!/usr/bin/env python
from __future__ import absolute_import
from __future__ import division, print_function, unicode_literals

from flask import Flask, render_template, jsonify, request
from os import environ

from sumy.parsers.html import HtmlParser
from sumy.parsers.plaintext import PlaintextParser
from sumy.summarizers.luhn import LuhnSummarizer as Summarizer
from sumy.nlp.tokenizers import Tokenizer
from sumy.nlp.stemmers import Stemmer
from sumy.utils import get_stop_words

from werkzeug.wrappers import Response
import json
import math
import re


SENTENCES_COUNT = 3
LANGUAGE = 'english'

HOST = environ.get('APP_HOST')
HOST = HOST if HOST else '0.0.0.0'

PORT = environ.get('APP_PORT')
PORT = PORT if PORT else 5000

DEBUG = environ.get('APP_DEBUG')
DEBUG = DEBUG == '1'

SW = 'stopwords_indo'

def create_app():
    app = Flask(__name__)
    return app

def get_indo_stopwords():
    with open(SW, 'r') as f:
        c = f.read()
        return [item for item in c.split('\n') if item != '']

def normalize_text(text):
    return re.sub('[^0-9a-zA-Z]+', '', text.replace('\xe2', ''))

def parse(text, parser):
    stemmer = Stemmer(LANGUAGE)
    summarizer = Summarizer(stemmer)

    def _get_best_sentences(sentences, count, rating, *args, **kwargs):
        from operator import attrgetter
        from collections import namedtuple
        from sumy.utils import ItemsCount

        SentenceInfo = namedtuple("SentenceInfo", ("sentence", "order", "rating",))

        rate = rating
        if isinstance(rating, dict):
            assert not args and not kwargs
            rate = lambda s: rating[s]

        infos = (SentenceInfo(s, o, rate(s, *args, **kwargs))
            for o, s in enumerate(sentences))

        infos = sorted(infos, key=attrgetter("rating"), reverse=True)
        if not isinstance(count, ItemsCount):
            count = ItemsCount(count)
        infos = count(infos)
        infos = sorted(infos, key=attrgetter("order"))
        highest = infos[0].rating

        def _get_score(rating, order):
            return round(rating / (order + 1) / highest * 100, 2)

        def _output(info):
            return {
                'sentence': re.sub(r'[^\x00-\x7F]+', '', unicode(info.sentence)), 
                'score': _get_score(info.rating, info.order)
            }

        return map(_output, infos)

    summarizer._get_best_sentences = _get_best_sentences
    summarizer.stop_words = get_indo_stopwords()

    return summarizer(parser.document, SENTENCES_COUNT)


def create_route(app):
    @app.route('/', methods=['GET'])
    def home():
        return render_template('index.html')

    @app.route('/sum', methods=['POST'])
    def sum():
        url = request.form.get('url')
        txt = request.form.get('txt')

        if url and txt:
            return Response(json.dumps({'msg': 'Pick between URL or Text?'}),
                            headers={'Content-Type': 'application/json'},
                            status=400)

        tokenizer = Tokenizer(LANGUAGE)

        if url:
            parser = HtmlParser.from_url(url, tokenizer)
            response = parse(url, parser)
        else:
            parser = PlaintextParser.from_string(txt, tokenizer)
            response = parse(txt, parser)

        return Response(json.dumps(response),
                        headers={'Content-Type': 'application/json'},
                        status=200)


if __name__ == '__main__':
    app = create_app()
    create_route(app=app)
    app.run(host=HOST,
            port=PORT,
            debug=DEBUG)
